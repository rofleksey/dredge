// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// Defines values for GeneralError.
const (
	GeneralErrorTrue GeneralError = true
)

// Defines values for WsMessageMessageCmd.
const (
	WsMessageMessageCmdMessage WsMessageMessageCmd = "message"
)

// General defines model for General.
type General struct {
	Error      GeneralError `json:"error"`
	Msg        string       `json:"msg"`
	StatusCode int          `json:"statusCode,omitempty"`
}

// GeneralError defines model for General.Error.
type GeneralError bool

// GetUsersResponse defines model for GetUsersResponse.
type GetUsersResponse struct {
	Usernames []string `json:"usernames"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token string `json:"token"`
}

// Message defines model for Message.
type Message struct {
	Channel  string    `json:"channel"`
	Created  time.Time `json:"created"`
	Id       string    `json:"id"`
	Text     string    `json:"text"`
	Username string    `json:"username"`
}

// SearchRequest defines model for SearchRequest.
type SearchRequest struct {
	Limit  int    `json:"limit"`
	Offset int    `json:"offset"`
	Query  string `json:"query"`
}

// SearchResponse defines model for SearchResponse.
type SearchResponse struct {
	Messages   []Message `json:"messages"`
	TotalCount int       `json:"totalCount"`
}

// SendMessageRequest defines model for SendMessageRequest.
type SendMessageRequest struct {
	Channel  string `json:"channel"`
	Text     string `json:"text"`
	Username string `json:"username"`
}

// WsMessage defines model for WsMessage.
type WsMessage struct {
	Cmd   string `json:"cmd"`
	Id    string `exhaustruct:"optional" json:"id"`
	union json.RawMessage
}

// WsMessageMessage defines model for WsMessageMessage.
type WsMessageMessage struct {
	Cmd     WsMessageMessageCmd `json:"cmd"`
	Id      string              `exhaustruct:"optional" json:"id"`
	Message Message             `json:"message"`
}

// WsMessageMessageCmd defines model for WsMessageMessage.Cmd.
type WsMessageMessageCmd string

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// SearchMessagesJSONRequestBody defines body for SearchMessages for application/json ContentType.
type SearchMessagesJSONRequestBody = SearchRequest

// SendMessageJSONRequestBody defines body for SendMessage for application/json ContentType.
type SendMessageJSONRequestBody = SendMessageRequest

// AsWsMessageMessage returns the union data inside the WsMessage as a WsMessageMessage
func (t WsMessage) AsWsMessageMessage() (WsMessageMessage, error) {
	var body WsMessageMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWsMessageMessage overwrites any union data inside the WsMessage as the provided WsMessageMessage
func (t *WsMessage) FromWsMessageMessage(v WsMessageMessage) error {
	t.Cmd = "message"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWsMessageMessage performs a merge with any union data inside the WsMessage, using the provided WsMessageMessage
func (t *WsMessage) MergeWsMessageMessage(v WsMessageMessage) error {
	t.Cmd = "message"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WsMessage) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"cmd"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WsMessage) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "message":
		return t.AsWsMessageMessage()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WsMessage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["cmd"], err = json.Marshal(t.Cmd)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cmd': %w", err)
	}

	object["id"], err = json.Marshal(t.Id)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *WsMessage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cmd"]; found {
		err = json.Unmarshal(raw, &t.Cmd)
		if err != nil {
			return fmt.Errorf("error reading 'cmd': %w", err)
		}
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &t.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
	}

	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login
	// (POST /login)
	Login(c *fiber.Ctx) error
	// Search messages
	// (POST /message/searh)
	SearchMessages(c *fiber.Ctx) error
	// Send message
	// (POST /message/send)
	SendMessage(c *fiber.Ctx) error
	// Get users
	// (GET /users)
	GetUsers(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *fiber.Ctx) error {

	return siw.Handler.Login(c)
}

// SearchMessages operation middleware
func (siw *ServerInterfaceWrapper) SearchMessages(c *fiber.Ctx) error {

	return siw.Handler.SearchMessages(c)
}

// SendMessage operation middleware
func (siw *ServerInterfaceWrapper) SendMessage(c *fiber.Ctx) error {

	return siw.Handler.SendMessage(c)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *fiber.Ctx) error {

	return siw.Handler.GetUsers(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/login", wrapper.Login)

	router.Post(options.BaseURL+"/message/searh", wrapper.SearchMessages)

	router.Post(options.BaseURL+"/message/send", wrapper.SendMessage)

	router.Get(options.BaseURL+"/users", wrapper.GetUsers)

}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(ctx *fiber.Ctx) error
}

type Login200JSONResponse LoginResponse

func (response Login200JSONResponse) VisitLoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type Login400JSONResponse General

func (response Login400JSONResponse) VisitLoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type Login401JSONResponse General

func (response Login401JSONResponse) VisitLoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type Login403JSONResponse General

func (response Login403JSONResponse) VisitLoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type Login500JSONResponse General

func (response Login500JSONResponse) VisitLoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type SearchMessagesRequestObject struct {
	Body *SearchMessagesJSONRequestBody
}

type SearchMessagesResponseObject interface {
	VisitSearchMessagesResponse(ctx *fiber.Ctx) error
}

type SearchMessages200JSONResponse SearchResponse

func (response SearchMessages200JSONResponse) VisitSearchMessagesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type SearchMessages400JSONResponse General

func (response SearchMessages400JSONResponse) VisitSearchMessagesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type SearchMessages401JSONResponse General

func (response SearchMessages401JSONResponse) VisitSearchMessagesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type SearchMessages403JSONResponse General

func (response SearchMessages403JSONResponse) VisitSearchMessagesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type SearchMessages500JSONResponse General

func (response SearchMessages500JSONResponse) VisitSearchMessagesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type SendMessageRequestObject struct {
	Body *SendMessageJSONRequestBody
}

type SendMessageResponseObject interface {
	VisitSendMessageResponse(ctx *fiber.Ctx) error
}

type SendMessage200Response struct {
}

func (response SendMessage200Response) VisitSendMessageResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type SendMessage400JSONResponse General

func (response SendMessage400JSONResponse) VisitSendMessageResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type SendMessage401JSONResponse General

func (response SendMessage401JSONResponse) VisitSendMessageResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type SendMessage403JSONResponse General

func (response SendMessage403JSONResponse) VisitSendMessageResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type SendMessage500JSONResponse General

func (response SendMessage500JSONResponse) VisitSendMessageResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetUsersRequestObject struct {
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(ctx *fiber.Ctx) error
}

type GetUsers200JSONResponse GetUsersResponse

func (response GetUsers200JSONResponse) VisitGetUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetUsers400JSONResponse General

func (response GetUsers400JSONResponse) VisitGetUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetUsers401JSONResponse General

func (response GetUsers401JSONResponse) VisitGetUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetUsers403JSONResponse General

func (response GetUsers403JSONResponse) VisitGetUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetUsers500JSONResponse General

func (response GetUsers500JSONResponse) VisitGetUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Login
	// (POST /login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Search messages
	// (POST /message/searh)
	SearchMessages(ctx context.Context, request SearchMessagesRequestObject) (SearchMessagesResponseObject, error)
	// Send message
	// (POST /message/send)
	SendMessage(ctx context.Context, request SendMessageRequestObject) (SendMessageResponseObject, error)
	// Get users
	// (GET /users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *fiber.Ctx) error {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx.UserContext(), request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SearchMessages operation middleware
func (sh *strictHandler) SearchMessages(ctx *fiber.Ctx) error {
	var request SearchMessagesRequestObject

	var body SearchMessagesJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.SearchMessages(ctx.UserContext(), request.(SearchMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchMessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SearchMessagesResponseObject); ok {
		if err := validResponse.VisitSearchMessagesResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SendMessage operation middleware
func (sh *strictHandler) SendMessage(ctx *fiber.Ctx) error {
	var request SendMessageRequestObject

	var body SendMessageJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.SendMessage(ctx.UserContext(), request.(SendMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendMessage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SendMessageResponseObject); ok {
		if err := validResponse.VisitSendMessageResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(ctx *fiber.Ctx) error {
	var request GetUsersRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx.UserContext(), request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		if err := validResponse.VisitGetUsersResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYTXPbNhD9K5ptj5QoN+mFtyZtPZ5p2k48mR48PsDEikJCAvTu0rWa0X/vAKBEfYBy",
	"ZmL7pBtFEvt2H95bLPUVSte0zqIVhuIrcLnERoXLS7RIqvaXLbkWSQyGB0jkyF9oXKiuFiiEOswAbddA",
	"ceN/3GYgqxahgDvnalQW1hk0XPlV/QMWMrby91mUdPzeadx5bKxghQQZPE5dYwSbVlYRab3OgPC+M4Qa",
	"ips+nxh/L9qQhbv7jKV4sEuUT4zEH5FbZxmPy+sYyaom/vDAnMy6v6GI1AoOUxpipHL4w1XGfsT7DlmO",
	"8VvF/K8jnUTdBE48HEkBsiHiiWTG2BD3Be3TaPG1VPwPyKyqRORyqazFOllmSagEAwULR40SKEArwamY",
	"UNHRApOmS/BRvpNHoyHb5prt0hqCD7mmir9GReVydKtr0xhJiH6dgVssGEee3XdIq6czj69tQ2U93Kk8",
	"x1TQxE3ct8SPhAso4Id8aCF53z/yza4fGSUDcaLq966zyeoOatgC761Ll2B1jzrK9ynJPYNUdrQxCCbE",
	"TSX8D+9YQxsuyTTGKom9tVFt6zEG8seo3sbZ4bwve/VnyBvKRgdNWfxrAcXN6a07jnebHfLYpO2WcmFo",
	"4Ko109JprNBO8VFITUVV8TB5XKqOhbrSe9y1YpxVNawPufWQAeAklePNJmbcH1FbSm+zly0iGzbvG/0y",
	"VnaWyHlDgF9k7MKFQp0VVQYlR9HCr4S68prsqIYCliItF3keb8/ILWr8wriaURdsYKQeVk1++fsKMnhA",
	"YuMsFHAxm8/mQUstWtUaKODNbD57G04ZWQY28tofKWEPXHSh3wnlSbnSUMQTB2KdyPLO6dUmc4xNQbVt",
	"bcqwIv/Mzg6TyVM87h2tByIKs4O/EbtcyPWn+fy5sfseGsA1elsHPUAB111ZIrOn7+0z4m4GtQTiO6Un",
	"WzY86sVroH6yqpOlI/Mf6gj75jVgf3d0Z7TGMGz+/DoEX1nxPb+eXCM9IE1+C7Oof4+7plH+mO717u/l",
	"vYdzRkXLcYfE4/jDcPa9hFX2Z5NX9srBwHE2y9ks0SxRGJPt3HdgG6tPuWY7Ab6YZY5mzG/3zVneZ3kH",
	"jW7EHbXtPxqCTCpMaHrzdwW8YC8++kvk3I3Pco1yvUSZRIGGABze5PAJuR8sfifEL4z84QLWt+v/AwAA",
	"//8WtojVWxQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
