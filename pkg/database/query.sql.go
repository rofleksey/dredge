// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package database

import (
	"context"
	"time"
)

const createMessage = `-- name: CreateMessage :exec
INSERT INTO messages (id, created, channel, username, text)
VALUES ($1, $2, $3, $4, $5)
`

type CreateMessageParams struct {
	ID       string
	Created  time.Time
	Channel  string
	Username string
	Text     string
}

// CreateMessage
//
//	INSERT INTO messages (id, created, channel, username, text)
//	VALUES ($1, $2, $3, $4, $5)
func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) error {
	_, err := q.db.Exec(ctx, createMessage,
		arg.ID,
		arg.Created,
		arg.Channel,
		arg.Username,
		arg.Text,
	)
	return err
}

const createMigration = `-- name: CreateMigration :one
INSERT INTO migration (id, applied)
VALUES ($1, $2) RETURNING id
`

type CreateMigrationParams struct {
	ID      string
	Applied time.Time
}

// CreateMigration
//
//	INSERT INTO migration (id, applied)
//	VALUES ($1, $2) RETURNING id
func (q *Queries) CreateMigration(ctx context.Context, arg CreateMigrationParams) (string, error) {
	row := q.db.QueryRow(ctx, createMigration, arg.ID, arg.Applied)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getMigrations = `-- name: GetMigrations :many
SELECT id, applied
FROM migration
ORDER BY id
`

// GetMigrations
//
//	SELECT id, applied
//	FROM migration
//	ORDER BY id
func (q *Queries) GetMigrations(ctx context.Context) ([]Migration, error) {
	rows, err := q.db.Query(ctx, getMigrations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Migration{}
	for rows.Next() {
		var i Migration
		if err := rows.Scan(&i.ID, &i.Applied); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
